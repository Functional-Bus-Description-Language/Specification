#pagebreak()

= Grouping <grouping>

Grouping is a feature of the FBDL used to inform a compiler that particular functionalities might be accessed together, and their register location must meet additional constraints.
This is achieved using the group functionality described in @group.
The following functionalities can be grouped:
- config,
- group,
- irq,
- mask,
- param,
- return,
- static,
- satus.
However, not all groupable functionalities can belong to the same group.
For example, a config shall not be grouped with a param, as param is an inner functionality of a proc, and config instantiation within a proc is invalid.

The following snippet presents three grouped configs.
#block(breakable: false)[
#pad(left: 1em)[
```fbd
Main bus
  Config_Group group
    type cfg_t; width = 8;
    A cfg_t
    B cfg_t
    C cfg_t
```
] 
]

Any FBDL compliant compiler must place all three configs (`A`, `B`, `C`) in the same register.

== Single register group

A single register group is a group of functionalities that fit a single register.
The overall width of all functionalities is not greater than the single register width.
In such a case, all functionalities must be placed in the same register.
The specification does not impose any specific order of the functionalities within the register, and it is left to the compiler
implementation.
The following listing presents an example bus description with three single register groups.

#block(breakable: false)[
#pad(left: 1em)[
```fbd
Main bus
  Read_Write group
    C0 config; width = 16
    M0 mask;   width = 15
  Mixed group
    C1 config;  width = 16
    S11 static; width = 8
    S12 status; width = 8
  Read_Only group
    S21 status; width = 4
    S22 status; width = 7
```
]
]

All functionalities of the `Read_Write` group can be both read and written.
The code generated by a compiler for the requester must provide means for reading/writing the whole group as well as for reading/writing particular functionalities of the group.

The `Mixed` group contains functionality that can be read and written (`C1`), as well as functionalities that can only be read (`S11`, `S12`).
The code generated by a compiler for the requester must provide a means for reading all readable functionalities and writing all writable functionalities.
It is valid even if the group has single readable or single writable functionality.
The compiler must also generate means for reading/writing particular functionalities of the group.
In the case of `Mixed` group this will result in two means doing exactly the same (writing the `C1` config).
However, it is up to the user to decide which of the means should be used.
If it makes sense, it is perfectly valid to use both of them in different contexts.

All functionalities of the `Read_Only` group are read-only.
In this case, the compiler must generate a mean only for reading the group.
It must also generate means for reading particular functionalities.
